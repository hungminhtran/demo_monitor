/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "demo_monitor_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace demomonitor {

int _kMETRICValues[] = {
  METRIC::CPU_SYS,
  METRIC::CPU_USR,
  METRIC::RAM_PHYSIC,
  METRIC::RAM_SWAP,
  METRIC::DISK_READ,
  METRIC::DISK_WRITE,
  METRIC::DISK_FREE,
  METRIC::NET_IN,
  METRIC::NET_OUT
};
const char* _kMETRICNames[] = {
  "CPU_SYS",
  "CPU_USR",
  "RAM_PHYSIC",
  "RAM_SWAP",
  "DISK_READ",
  "DISK_WRITE",
  "DISK_FREE",
  "NET_IN",
  "NET_OUT"
};
const std::map<int, const char*> _METRIC_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kMETRICValues, _kMETRICNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTAGValues[] = {
  TAG::CPU,
  TAG::RAM,
  TAG::DISK,
  TAG::NET
};
const char* _kTAGNames[] = {
  "CPU",
  "RAM",
  "DISK",
  "NET"
};
const std::map<int, const char*> _TAG_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTAGValues, _kTAGNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


DataCollector::~DataCollector() throw() {
}


void DataCollector::__set_metric(const METRIC::type val) {
  this->metric = val;
}

void DataCollector::__set_tag(const TAG::type val) {
  this->tag = val;
}

void DataCollector::__set_object(const std::string& val) {
  this->object = val;
}

void DataCollector::__set_value(const double val) {
  this->value = val;
}

uint32_t DataCollector::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->metric = (METRIC::type)ecast0;
          this->__isset.metric = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->tag = (TAG::type)ecast1;
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->object);
          this->__isset.object = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataCollector::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataCollector");

  xfer += oprot->writeFieldBegin("metric", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->metric);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("object", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->object);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DataCollector &a, DataCollector &b) {
  using ::std::swap;
  swap(a.metric, b.metric);
  swap(a.tag, b.tag);
  swap(a.object, b.object);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

DataCollector::DataCollector(const DataCollector& other2) {
  metric = other2.metric;
  tag = other2.tag;
  object = other2.object;
  value = other2.value;
  __isset = other2.__isset;
}
DataCollector& DataCollector::operator=(const DataCollector& other3) {
  metric = other3.metric;
  tag = other3.tag;
  object = other3.object;
  value = other3.value;
  __isset = other3.__isset;
  return *this;
}
void DataCollector::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DataCollector(";
  out << "metric=" << to_string(metric);
  out << ", " << "tag=" << to_string(tag);
  out << ", " << "object=" << to_string(object);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


TimeLapseData::~TimeLapseData() throw() {
}


void TimeLapseData::__set_beginTime(const std::string& val) {
  this->beginTime = val;
}

void TimeLapseData::__set_totalElements(const int32_t val) {
  this->totalElements = val;
}

void TimeLapseData::__set_values(const std::vector<double> & val) {
  this->values = val;
}

uint32_t TimeLapseData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->beginTime);
          this->__isset.beginTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalElements);
          this->__isset.totalElements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->values.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += iprot->readDouble(this->values[_i8]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TimeLapseData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TimeLapseData");

  xfer += oprot->writeFieldBegin("beginTime", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->beginTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalElements", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->totalElements);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->values.size()));
    std::vector<double> ::const_iterator _iter9;
    for (_iter9 = this->values.begin(); _iter9 != this->values.end(); ++_iter9)
    {
      xfer += oprot->writeDouble((*_iter9));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TimeLapseData &a, TimeLapseData &b) {
  using ::std::swap;
  swap(a.beginTime, b.beginTime);
  swap(a.totalElements, b.totalElements);
  swap(a.values, b.values);
  swap(a.__isset, b.__isset);
}

TimeLapseData::TimeLapseData(const TimeLapseData& other10) {
  beginTime = other10.beginTime;
  totalElements = other10.totalElements;
  values = other10.values;
  __isset = other10.__isset;
}
TimeLapseData& TimeLapseData::operator=(const TimeLapseData& other11) {
  beginTime = other11.beginTime;
  totalElements = other11.totalElements;
  values = other11.values;
  __isset = other11.__isset;
  return *this;
}
void TimeLapseData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TimeLapseData(";
  out << "beginTime=" << to_string(beginTime);
  out << ", " << "totalElements=" << to_string(totalElements);
  out << ", " << "values=" << to_string(values);
  out << ")";
}


InvalidIOOperator::~InvalidIOOperator() throw() {
}


void InvalidIOOperator::__set_iwhat(const int32_t val) {
  this->iwhat = val;
}

void InvalidIOOperator::__set_swhy(const std::string& val) {
  this->swhy = val;
}

uint32_t InvalidIOOperator::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iwhat);
          this->__isset.iwhat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->swhy);
          this->__isset.swhy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidIOOperator::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidIOOperator");

  xfer += oprot->writeFieldBegin("iwhat", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->iwhat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("swhy", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->swhy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidIOOperator &a, InvalidIOOperator &b) {
  using ::std::swap;
  swap(a.iwhat, b.iwhat);
  swap(a.swhy, b.swhy);
  swap(a.__isset, b.__isset);
}

InvalidIOOperator::InvalidIOOperator(const InvalidIOOperator& other12) : TException() {
  iwhat = other12.iwhat;
  swhy = other12.swhy;
  __isset = other12.__isset;
}
InvalidIOOperator& InvalidIOOperator::operator=(const InvalidIOOperator& other13) {
  iwhat = other13.iwhat;
  swhy = other13.swhy;
  __isset = other13.__isset;
  return *this;
}
void InvalidIOOperator::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidIOOperator(";
  out << "iwhat=" << to_string(iwhat);
  out << ", " << "swhy=" << to_string(swhy);
  out << ")";
}

const char* InvalidIOOperator::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidIOOperator";
  }
}

} // namespace

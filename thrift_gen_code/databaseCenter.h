/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef databaseCenter_H
#define databaseCenter_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "demo_monitor_types.h"

namespace demomonitor {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class databaseCenterIf {
 public:
  virtual ~databaseCenterIf() {}
  virtual void send_data_to_server(const DataCollector& dat) = 0;
  virtual void recieve_data_from_server(TimeLapseData& _return, const DataCollector& dat, const int64_t beginTime, const int64_t endTime) = 0;
  virtual void debug() = 0;
};

class databaseCenterIfFactory {
 public:
  typedef databaseCenterIf Handler;

  virtual ~databaseCenterIfFactory() {}

  virtual databaseCenterIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(databaseCenterIf* /* handler */) = 0;
};

class databaseCenterIfSingletonFactory : virtual public databaseCenterIfFactory {
 public:
  databaseCenterIfSingletonFactory(const boost::shared_ptr<databaseCenterIf>& iface) : iface_(iface) {}
  virtual ~databaseCenterIfSingletonFactory() {}

  virtual databaseCenterIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(databaseCenterIf* /* handler */) {}

 protected:
  boost::shared_ptr<databaseCenterIf> iface_;
};

class databaseCenterNull : virtual public databaseCenterIf {
 public:
  virtual ~databaseCenterNull() {}
  void send_data_to_server(const DataCollector& /* dat */) {
    return;
  }
  void recieve_data_from_server(TimeLapseData& /* _return */, const DataCollector& /* dat */, const int64_t /* beginTime */, const int64_t /* endTime */) {
    return;
  }
  void debug() {
    return;
  }
};

typedef struct _databaseCenter_send_data_to_server_args__isset {
  _databaseCenter_send_data_to_server_args__isset() : dat(false) {}
  bool dat :1;
} _databaseCenter_send_data_to_server_args__isset;

class databaseCenter_send_data_to_server_args {
 public:

  databaseCenter_send_data_to_server_args(const databaseCenter_send_data_to_server_args&);
  databaseCenter_send_data_to_server_args& operator=(const databaseCenter_send_data_to_server_args&);
  databaseCenter_send_data_to_server_args() {
  }

  virtual ~databaseCenter_send_data_to_server_args() throw();
  DataCollector dat;

  _databaseCenter_send_data_to_server_args__isset __isset;

  void __set_dat(const DataCollector& val);

  bool operator == (const databaseCenter_send_data_to_server_args & rhs) const
  {
    if (!(dat == rhs.dat))
      return false;
    return true;
  }
  bool operator != (const databaseCenter_send_data_to_server_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const databaseCenter_send_data_to_server_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class databaseCenter_send_data_to_server_pargs {
 public:


  virtual ~databaseCenter_send_data_to_server_pargs() throw();
  const DataCollector* dat;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _databaseCenter_recieve_data_from_server_args__isset {
  _databaseCenter_recieve_data_from_server_args__isset() : dat(false), beginTime(false), endTime(false) {}
  bool dat :1;
  bool beginTime :1;
  bool endTime :1;
} _databaseCenter_recieve_data_from_server_args__isset;

class databaseCenter_recieve_data_from_server_args {
 public:

  databaseCenter_recieve_data_from_server_args(const databaseCenter_recieve_data_from_server_args&);
  databaseCenter_recieve_data_from_server_args& operator=(const databaseCenter_recieve_data_from_server_args&);
  databaseCenter_recieve_data_from_server_args() : beginTime(0), endTime(0) {
  }

  virtual ~databaseCenter_recieve_data_from_server_args() throw();
  DataCollector dat;
  int64_t beginTime;
  int64_t endTime;

  _databaseCenter_recieve_data_from_server_args__isset __isset;

  void __set_dat(const DataCollector& val);

  void __set_beginTime(const int64_t val);

  void __set_endTime(const int64_t val);

  bool operator == (const databaseCenter_recieve_data_from_server_args & rhs) const
  {
    if (!(dat == rhs.dat))
      return false;
    if (!(beginTime == rhs.beginTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    return true;
  }
  bool operator != (const databaseCenter_recieve_data_from_server_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const databaseCenter_recieve_data_from_server_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class databaseCenter_recieve_data_from_server_pargs {
 public:


  virtual ~databaseCenter_recieve_data_from_server_pargs() throw();
  const DataCollector* dat;
  const int64_t* beginTime;
  const int64_t* endTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _databaseCenter_recieve_data_from_server_result__isset {
  _databaseCenter_recieve_data_from_server_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _databaseCenter_recieve_data_from_server_result__isset;

class databaseCenter_recieve_data_from_server_result {
 public:

  databaseCenter_recieve_data_from_server_result(const databaseCenter_recieve_data_from_server_result&);
  databaseCenter_recieve_data_from_server_result& operator=(const databaseCenter_recieve_data_from_server_result&);
  databaseCenter_recieve_data_from_server_result() {
  }

  virtual ~databaseCenter_recieve_data_from_server_result() throw();
  TimeLapseData success;
  InvalidIOOperator e;

  _databaseCenter_recieve_data_from_server_result__isset __isset;

  void __set_success(const TimeLapseData& val);

  void __set_e(const InvalidIOOperator& val);

  bool operator == (const databaseCenter_recieve_data_from_server_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const databaseCenter_recieve_data_from_server_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const databaseCenter_recieve_data_from_server_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _databaseCenter_recieve_data_from_server_presult__isset {
  _databaseCenter_recieve_data_from_server_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _databaseCenter_recieve_data_from_server_presult__isset;

class databaseCenter_recieve_data_from_server_presult {
 public:


  virtual ~databaseCenter_recieve_data_from_server_presult() throw();
  TimeLapseData* success;
  InvalidIOOperator e;

  _databaseCenter_recieve_data_from_server_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class databaseCenter_debug_args {
 public:

  databaseCenter_debug_args(const databaseCenter_debug_args&);
  databaseCenter_debug_args& operator=(const databaseCenter_debug_args&);
  databaseCenter_debug_args() {
  }

  virtual ~databaseCenter_debug_args() throw();

  bool operator == (const databaseCenter_debug_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const databaseCenter_debug_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const databaseCenter_debug_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class databaseCenter_debug_pargs {
 public:


  virtual ~databaseCenter_debug_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class databaseCenterClient : virtual public databaseCenterIf {
 public:
  databaseCenterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  databaseCenterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void send_data_to_server(const DataCollector& dat);
  void send_send_data_to_server(const DataCollector& dat);
  void recieve_data_from_server(TimeLapseData& _return, const DataCollector& dat, const int64_t beginTime, const int64_t endTime);
  void send_recieve_data_from_server(const DataCollector& dat, const int64_t beginTime, const int64_t endTime);
  void recv_recieve_data_from_server(TimeLapseData& _return);
  void debug();
  void send_debug();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class databaseCenterProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<databaseCenterIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (databaseCenterProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_send_data_to_server(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recieve_data_from_server(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_debug(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  databaseCenterProcessor(boost::shared_ptr<databaseCenterIf> iface) :
    iface_(iface) {
    processMap_["send_data_to_server"] = &databaseCenterProcessor::process_send_data_to_server;
    processMap_["recieve_data_from_server"] = &databaseCenterProcessor::process_recieve_data_from_server;
    processMap_["debug"] = &databaseCenterProcessor::process_debug;
  }

  virtual ~databaseCenterProcessor() {}
};

class databaseCenterProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  databaseCenterProcessorFactory(const ::boost::shared_ptr< databaseCenterIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< databaseCenterIfFactory > handlerFactory_;
};

class databaseCenterMultiface : virtual public databaseCenterIf {
 public:
  databaseCenterMultiface(std::vector<boost::shared_ptr<databaseCenterIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~databaseCenterMultiface() {}
 protected:
  std::vector<boost::shared_ptr<databaseCenterIf> > ifaces_;
  databaseCenterMultiface() {}
  void add(boost::shared_ptr<databaseCenterIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void send_data_to_server(const DataCollector& dat) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send_data_to_server(dat);
    }
    ifaces_[i]->send_data_to_server(dat);
  }

  void recieve_data_from_server(TimeLapseData& _return, const DataCollector& dat, const int64_t beginTime, const int64_t endTime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recieve_data_from_server(_return, dat, beginTime, endTime);
    }
    ifaces_[i]->recieve_data_from_server(_return, dat, beginTime, endTime);
    return;
  }

  void debug() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->debug();
    }
    ifaces_[i]->debug();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class databaseCenterConcurrentClient : virtual public databaseCenterIf {
 public:
  databaseCenterConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  databaseCenterConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void send_data_to_server(const DataCollector& dat);
  void send_send_data_to_server(const DataCollector& dat);
  void recieve_data_from_server(TimeLapseData& _return, const DataCollector& dat, const int64_t beginTime, const int64_t endTime);
  int32_t send_recieve_data_from_server(const DataCollector& dat, const int64_t beginTime, const int64_t endTime);
  void recv_recieve_data_from_server(TimeLapseData& _return, const int32_t seqid);
  void debug();
  void send_debug();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif

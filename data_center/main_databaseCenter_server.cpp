// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "../thrift_gen_code/databaseCenter.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace ::demomonitor;

#include <iostream>
#include <string>
#include <valgrind/memcheck.h>

class databaseCenterHandler : virtual public databaseCenterIf {
public:

    databaseCenterHandler() {
        // Your initialization goes here
    }

    void send_data_to_server(const DataCollector& dat, const std::string& beginTime) {
        // Your implementation goes here
        std::cout << beginTime<< " " << dat << "send_data\n";
        
        VALGRIND_DO_LEAK_CHECK;
    }

    void recieve_data_from_server(TimeLapseData& _return, const std::string& beginTime, const std::string& endTime) {
        // Your implementation goes here
        printf("receive_data_from_server\n");
    }

};

int main(int argc, char **argv) {
    std::cout << "running.." << std::endl;
    int port = 9090;
    shared_ptr<databaseCenterHandler> handler(new databaseCenterHandler());
    shared_ptr<TProcessor> processor(new databaseCenterProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}


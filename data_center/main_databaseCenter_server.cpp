// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "thrift_gen_code/databaseCenter.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::demomonitor;

#include <iostream>
using namespace std;

class databaseCenterHandler : virtual public databaseCenterIf {
 public:
  databaseCenterHandler() {
    // Your initialization goes here
  }

  void send_data_to_server(const DataCollector& dat, const std::string& beginTime) {
    // Your implementation goes here
    printf("send_data_to_server\n");
  }

  void recieve_data_from_server(TimeLapseData& _return, const std::string& beginTime, const std::string& endTime) {
    // Your implementation goes here
    printf("recieve_data_from_server\n");
  }

};


//void send_data_to_server(const DataCollector& dat) {
//    // Your implementation goes here
//    time_t _time = time(0); // get time now
//    struct tm * _tnow = localtime(&_time);
//    cout << _tnow->tm_hour << ":" << _tnow->tm_min << ":" << _tnow->tm_sec << " " << dat << "send_data\n";
//
//}

int main(int argc, char **argv) {
    cout << "running.." << endl;
    int port = 9090;
    shared_ptr<databaseCenterHandler> handler(new databaseCenterHandler());
    shared_ptr<TProcessor> processor(new databaseCenterProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}

